<?php

/**
 * Model user objects and provide storage/retrieval from the database.
 *
 * Derived from User class DRyft project by Errol Sayre
 * @author Clay Bellou
 */

namespace ToT;

class User
{

	/**
	 * User identification number
	 *
	 * Protect this value to make it immutable.
	 *
	 * @type int
	 */
	protected $id;

	/**
	 * User account name
	 *
	 * Protect this value to make it immutable.
	 *
	 * @type string
	 */
	protected $username;

	/**
	 * User type
	 *
	 * Indicates if the user account is for a Customer, Waiter, Host, or Manager
	 * Protect this value to make it immutable.
	 *
	 * @type string
	 */
	protected $type;

	/**
	 * User password hash
	 *
	 * This value is a hash generated by the password_hash algorithm.
	 * Protect this value to make it immutable without the appropriate accessors.
	 *
	 * @type string
	 */
	protected $passwordHash;

	/**
	 * First name
	 * @type string
	 */
	public $firstName;

	/**
	 * Last name
	 * @type string
	 */
	public $lastName;


	/**
	 * Email address
	 * Loaded outside of constructor
	 * @type string
	 */
	public $email;

	/**
	 * Phone number
	 * Loaded outside of constructor
	 * @type string
	 */
	public $phone;



	/**Session variables for the payment page
	 * 
	 * Reservation Party Size
	 */
	public $reservationSize = null;
	/**
	 * Reservation Time
	 */
	public $reservationTime = null;
	/**
	 * Reservation Balance
	 */
	public $reservationBalance = null;
	/**
	 * Order Balance
	 */
	public $orderBalance = null;
	/**
	 * Payment Type
	 */
	public $paymentType = null;

	/**
	 * Constructor
	 * @return ToT\User
	 */
	public function __construct(
		string $userName = '',
		string $firstName = '',
		string $lastName = '',
		string $type = 'Customer',
		int $userId = 0,
		string $passwordHash = ''
	) {
		$this->id           = $userId;
		$this->username     = $userName;
		$this->firstName    = $firstName;
		$this->lastName     = $lastName;
		$this->passwordHash = $passwordHash;

		$this->setType($type);
	}



	/**
	 * Get the user id
	 * @return int
	 */
	public function id()
	{
		return $this->id;
	}
	/**
	 * Get the username
	 * @return string
	 */
	public function username()
	{
		return $this->username;
	}
	/**
	 * Get the user type
	 * @return string
	 */
	public function type()
	{
		return $this->type;
	}
	/**
	 * @return string
	 */
	public function firstName()
	{
		return $this->firstName;
	}
	/**
	 * @return string
	 */
	public function lastName()
	{
		return $this->lastName;
	}
	/**
	 * @return string
	 */
	public function email()
	{
		return $this->email;
	}
	/**
	 * @return string
	 */
	public function phone()
	{
		return $this->phone;
	}
	/* Set username
	*/
	public function setUsername($username)
	{
		$this->username = $username;
	}
	/* Set first name
	*/
	public function setFirstName($fName)
	{
		$this->firstName = $fName;
	}
	/* Set last name
	*/
	public function setLastName($lName)
	{
		$this->lastName = $lName;
	}
	/* Set email
	*/
	public function setEmail($emaill)
	{
		$this->email = $emaill;
	}
	/* Set phone
	*/
	public function setPhone($phonee)
	{
		$this->phone = $phonee;
	}
	/**
	 * Get reservationSize
	 */
	public function getReservationSize()
	{
		return $this->reservationSize;
	}
	/**
	 * Set reservationSize
	 */
	public function setReservationSize($resSize)
	{
		$this->reservationSize = $resSize;
	}

	/**
	 * Get reservationTime
	 */
	public function getReservationTime()
	{
		return $this->reservationTime;
	}
	/**
	 * Set reservationTime
	 */
	public function setReservationTime($resTime)
	{
		$this->reservationTime = $resTime;
	}

	/**
	 * Get reservationBalance
	 */
	public function getReservationBalance()
	{
		return $this->reservationBalance;
	}
	/**
	 * Set reservationTime
	 */
	public function setReservationBalance($resBalance)
	{
		$this->reservationBalance = $resBalance;
	}

	/**
	 * Get orderBalance
	 */
	public function getOrderBalance()
	{
		return $this->orderBalance;
	}
	/**
	 * Set orderBalance
	 */
	public function setOrderBalance($balance)
	{
		$this->orderBalance = $balance;
	}

	/**
	 * Get paymentType
	 */
	public function getPaymentType()
	{
		return $this->paymentType;
	}
	/**
	 * Set paymentType
	 */
	public function setPaymentType($type)
	{
		$this->paymentType = $type;
	}

	/**
	 * Ensure proper type is set
	 *
	 * I'm making this public to use it outside of this class, however it should now make use of
	 * user authorizations to prevent non-managers from changing their user type.
	 *
	 * @param string $type
	 * @return User
	 */
	public function setType($type)
	{
		if ($type == Constants::USER_TYPE_CUSTOMER) {
			$this->type = Constants::USER_TYPE_CUSTOMER;
		} elseif ($type == Constants::USER_TYPE_WAITER) {
			$this->type = Constants::USER_TYPE_WAITER;
		} elseif ($type == Constants::USER_TYPE_MANAGER) {
			$this->type = Constants::USER_TYPE_MANAGER;
		} elseif ($type == Constants::USER_TYPE_HOST) {
			$this->type = Constants::USER_TYPE_HOST;
		}
		return $this;
	}

	/**
	 * Is the user a customer
	 */
	public function isCustomer()
	{
		return ($this->type == Constants::USER_TYPE_CUSTOMER);
	}

	/**
	 * Is the user a waiter
	 */
	public function isWaiter()
	{
		return ($this->type == Constants::USER_TYPE_WAITER);
	}

	/**
	 * Is the user a host
	 */
	public function isHost()
	{
		return ($this->type == Constants::USER_TYPE_HOST);
	}

	/**
	 * Is the user a manager
	 */
	public function isManager()
	{
		return ($this->type == Constants::USER_TYPE_MANAGER);
	}

	/**
	 * Is the user a Waiter, Host, or Manager
	 * @return boolean 
	 */
	public function isEmployee()
	{
		return ($this->isManager() || $this->isHost() || $this->isWaiter());
	}
	/**
	 * Set a new password
	 *
	 * @param string $password
	 */
	public function setPassword(string $password)
	{
		$this->passwordHash = password_hash($password, PASSWORD_DEFAULT);
	}

	/**
	 * Compare a user's password
	 *
	 * @param string $password
	 * @return boolean
	 */
	public function validatePassword(string $password)
	{
		return password_verify($password, $this->passwordHash);
	}

	/**
	 * Store the object to the database.
	 *
	 * @return boolean
	 */
	public function save()
	{
		// insert/update the record in the database
		// get a reference to the database
		$db = Database\Connection::getConnection();

		// determine if this is an insert or update
		if ($this->id) {
			$query = 'UPDATE `users`' . PHP_EOL
				. 'SET ' . PHP_EOL
				. '  `username` = "'        . $db->escape_string($this->username)     . '",' . PHP_EOL
				. '  `type` = "'            . $db->escape_string($this->type)         . '",' . PHP_EOL
				. '  `pw_hash` = "'         . $db->escape_string($this->passwordHash) . '",' . PHP_EOL
				. '  `name_first` = "'      . $db->escape_string($this->firstName)    . '",' . PHP_EOL
				. '  `name_last` = "'       . $db->escape_string($this->lastName)     . '",' . PHP_EOL
				. '  `email` = "'           . $db->escape_string($this->email)        . '",' . PHP_EOL
				. '  `phone` = "'           . $db->escape_string($this->phone)        . '"' . PHP_EOL
				. 'WHERE `USER_ID` = '    . intval($this->id) . ';';
			if ($db->query($query) === false) {
				throw new Database\Exception('Unable to save user: ' . $db->error . PHP_EOL . '<pre>' . $query . '</pre>');
			}
		} else {
			// TODO: build this out
			$query = 'INSERT INTO `users` (' . PHP_EOL
				. '  `username`,' . PHP_EOL
				. '  `type`,' . PHP_EOL
				. '  `pw_hash`,' . PHP_EOL
				. '  `name_first`,' . PHP_EOL
				. '  `name_last`,' . PHP_EOL
				. '  `email`,' . PHP_EOL
				. '  `phone`,' . PHP_EOL
				. ') VALUES (' . PHP_EOL
				. '  "' . $db->escape_string($this->username)     . '",' . PHP_EOL
				. '  "' . $db->escape_string($this->type)         . '",' . PHP_EOL
				. '  "' . $db->escape_string($this->passwordHash) . '",' . PHP_EOL
				. '  "' . $db->escape_string($this->lastName)     . '",' . PHP_EOL
				. '  "' . $db->escape_string($this->firstName)    . '",' . PHP_EOL
				. '  "' . $db->escape_string($this->email)        . '",' . PHP_EOL
				. '  "' . $db->escape_string($this->phone)        . '"' . PHP_EOL
				. ');';
			if ($db->query($query) !== false) {
				// try to read the user id back
				$this->id = $db->insert_id;
			} else {
				throw new Database\Exception('Unable to insert user: ' . $db->error . PHP_EOL . '<pre>' . $query . '</pre>');
			}
		}

		//TODO If we have any user-type special attribute tables, ensure to create/update them here!

		return true;
	}

	//NOTE FROM Clay!!!!!!!
	//I have no idea what this bit of code does, so commenting it out.
	//Feel free to add it back if you happen to have use for it.
	/**
	 * Load changes from a request object
	 *
	 * @return boolean
	 
	public function updateFromRequest($data)
	{
		// first look for the easy to update items
		foreach ($this->formInputPropertyMapping() as $property => $formKey) {
			if (array_key_exists($formKey, $data)) {
				$this->$property = $data[$formKey];
			}
		}

		// assume if we're getting a password reset the system has already confirmed the user has
		// permissions to modify this
		if (array_key_exists(Constants::PARAM_PASSWORD, $data) && strlen($data[Constants::PARAM_PASSWORD]) > 7) {
			$this->setPassword($data[Constants::PARAM_PASSWORD]);
		}

		// user type can only be changed by a manager
		// trust that this field has been removed by the viewtroller
		if (array_key_exists(Constants::PARAM_USER_TYPE, $data)) {
			$this->setType($data[Constants::PARAM_USER_TYPE]);
		}

		// address ids should never be changed once created...

		return true;
	}
	 */


	/**
	 * Load a user by username
	 *
	 * @param string $username
	 * @return mixed
	 */
	public static function getUserByName(string $username)
	{

		// Grab a copy of the database connection
		$db = Database\Connection::getConnection();

		$select = 'SELECT * FROM `users` WHERE `username` = "'
			. $db->escape_string($username) . '";';

		return self::loadUserByQuery($select);
	}

	/**
	 * Load a user by id
	 *
	 * @param int $userId
	 * @return mixed
	 */
	public static function getUserById(int $userId)
	{
		// secure the query by forcing an integer value
		return self::loadUserByQuery(
			'SELECT * FROM `users` WHERE `USER_ID` = ' . intval($userId) . ';'
		);
	}

	/**
	 * Load all users from the database
	 *
	 * @return array
	 */
	public static function getUsers()
	{
		// collect them all
		return self::loadUsersByQuery(
			'SELECT * FROM `users` ORDER BY name_last, name_first, USER_ID;'
		);
	}

	/**
	 * Load all Customers from the database
	 *
	 * @return array
	 */
	public static function getCustomers()
	{
		// collect them all
		return self::loadUsersByQuery(
			'SELECT * FROM `users` WHERE type="Customer" ORDER BY name_last, name_first, USER_ID;'
		);
	}

	/**
	 * Load all Customers from the database
	 *
	 * @return array
	 */
	public static function getEmployees()
	{
		// collect them all
		return self::loadUsersByQuery(
			'SELECT * FROM `users` WHERE type="Host" OR type="Waiter" OR type="Manager" ORDER BY name_last, name_first, USER_ID;'
		);
	}

	/**
	 * Load all Waitstaff from the database
	 *
	 * @return array
	 */
	public static function getWaiters()
	{
		// collect them all
		return self::loadUsersByQuery(
			'SELECT * FROM `users` WHERE type="Waiter" ORDER BY name_last, name_first, USER_ID;'
		);
	}

	/**
	 * Determine if a user has an associated reservation
	 *
	 * @return array
	 */
	public function getReservationID()
	{
		// Grab a copy of the database connection
		$db = Database\Connection::getConnection();
		$select = "SELECT DISTINCT `RESERVATION_ID` FROM `reservation_users` WHERE USER_ID = " . $this->id . ";";
		// confirm the query worked
		if (($result = $db->query($select)) === false) {
			// TODO: replace a simple error with an exception
			throw new Database\Exception('DB Query Failed: ' . $db->error);
		}
		return $result->fetch_row();
	}

	/* Gets user object off an Order using the order ID
	 * @return User
	 */
	public static function getUserFromOrderID(int $orderID)
	{
		$intOrderID = intval($orderID);
		return self::loadUserByQuery(
			"SELECT * FROM `users`, `orders` WHERE users.USER_ID = orders.USER_ID AND ORDER_ID = {$intOrderID};"
		);
	}
	/**
	 * Execute a single select
	 *
	 * @param string $query
	 * @return User
	 */
	protected static function loadUserByQuery(string $select)
	{
		// use the multi-select to load matching users
		$users = self::loadUsersByQuery($select);

		// confirm the result set size
		$count = count($users);
		if ($count > 1) {
			// We must have just one result
			throw new Database\Exception('Single Lookup Failed: returned ' . count($users) . ' rows.');
		} elseif (!$count) {
			// No results found
			throw new Database\Exception('Single Lookup Failed: no match found.');
		}

		// pop off the single result
		return array_shift($users);
	}

	/**
	 * Load multiple users from a query
	 *
	 * @param string $query
	 * @return array
	 */
	protected static function loadUsersByQuery(string $select)
	{
		// Setup a dummy return value
		$users = [];

		// Grab a copy of the database connection
		$db = Database\Connection::getConnection();

		// confirm the query worked
		if (($result = $db->query($select)) === false) {
			// TODO: replace a simple error with an exception
			throw new Database\Exception('DB Query Failed: ' . $db->error);
		}

		// load and convert each result object
		while (($data = $result->fetch_object()) !== null) {
			$users[] = self::objectForRow($data);
		}

		// convert the resulting object
		return $users;
	}

	/**
	 * Delete a user by user id
	 *
	 * @param int $userID
	 * @return mixed
	 */
	public static function deleteUserByUserID(int $userID)
	{

		// Grab a copy of the database connection
		$db = Database\Connection::getConnection();

		$select = 'DELETE FROM `users` WHERE `USER_ID` = "'
			. intval($userID) . '";';

		// confirm the query worked
		if (($result = $db->query($select)) === false) {
			// TODO: replace a simple error with an exception
			throw new Database\Exception('Delete User failed: ' . $db->error);
		}
	}

	/**
	 * Convert a MySQL row object to a User
	 *
	 * @param object
	 * @return User
	 */
	public static function objectForRow($data)
	{

		// Create the appropriate subclass based on the user type
		$user = new User(
			$data->username,
			$data->name_first,
			$data->name_last,
			$data->type,
			$data->USER_ID,
			$data->pw_hash
		);

		// load the contact fields separately
		$user->email = $data->email;
		$user->phone = $data->phone;

		return $user;
	}

	//NOTE FROM Clay!!!!
	//Not sure the use of this, but also not gonna remove it just in case.
	/**
	 * Provide a mapping of form fields to properties
	 *
	 * @return array
	 */
	public static function formInputPropertyMapping()
	{
		return [
			'username'   => 'username',
			'firstName'  => 'firstName',
			'lastName'   => 'lastName',
			'email'      => 'email',
			'phone'      => 'phone',
		];
	}
}
